/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewController;

import Model.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.Timer;

/**
 *
 * @author pashathebeast
 */


public class MovementPanel extends javax.swing.JPanel {
    public static final MVector NEST_LOCATION = new MVector(100, 100);
    
    ArrayList<Robot> robots;
    Nest nest;
    
    Timer m_timer;
    Random r;

//    public static Point mouseLocation;
//    MVector desiredVector;
    
//    private Integer panelWidth;
//    private Integer panelHeight;
    
//    public int getPanelWidth() { return panelWidth; }
//    public void setPanelWidth(int panelWidth) { this.panelWidth = panelWidth; }
//
//    public int getPanelHeight() { return panelHeight; }
//    public void setPanelHeight(int panelHeight) { this.panelHeight = panelHeight; }
    
    /**
     * Creates new form MovementPanel
     */
    public MovementPanel() {
        initComponents();
        m_timer = new Timer(25, new TimerAction());
        r = new Random();
        robots = new ArrayList<>();
        nest = new Nest(NEST_LOCATION);
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);   
        
        Graphics2D g2D = (Graphics2D)g;
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // draw bounds
        g2D.setColor(Color.LIGHT_GRAY);
        g2D.drawRect(40, 40, this.getWidth()-80, this.getHeight()-80);
        
        // draw nest with red
        if (this.nest != null) {
            this.nest.paintSelf(g2D);
        }
        
        // draw robots
        for (Robot robot : robots){
            robot.paintSelf(g2D);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAction = new javax.swing.JButton();
        labelAmount = new javax.swing.JLabel();
        buttonPlayPause = new javax.swing.JButton();
        labelHunter = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        buttonAction.setLabel("Action");
        buttonAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionActionPerformed(evt);
            }
        });

        buttonPlayPause.setText("play/pause");
        buttonPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayPauseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(buttonAction)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonPlayPause)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelHunter))
                    .add(labelAmount))
                .addContainerGap(599, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(labelAmount)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 509, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonAction)
                    .add(buttonPlayPause)
                    .add(labelHunter))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionActionPerformed

        
        // add robots
        for (int i = 0; i < 10; i++) {
            Robot v = new Robot(new MVector(this.nest.getLocation().getX(), this.nest.getLocation().getY()), new MVector(this.getWidth(), this.getHeight())); 
            v.setMaxSpeed(2);
            v.setMaxForce(0.05);
            robots.add(v);
        }
        
        labelAmount.setText("Population size: " + robots.size());
        if (!m_timer.isRunning()) {
            m_timer.start();
        }

    }//GEN-LAST:event_buttonActionActionPerformed

    
    private void buttonPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayPauseActionPerformed
        if (!m_timer.isRunning()) {
            m_timer.start();
        }
        else{
            m_timer.stop();
        }
    }//GEN-LAST:event_buttonPlayPauseActionPerformed

    
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // on resize go through all robots and set their bounds
        for (Robot robot : robots){
            robot.setBounds(new MVector(this.getWidth(), this.getHeight()));
        }
    }//GEN-LAST:event_formComponentResized

        class TimerAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            for (int i = 0; i < robots.size(); i++) {
                //  look at the boundaries
                if(!robots.get(i).KeepInsideBoundaries()){
                    robots.get(i).Wander();
                }               
                robots.get(i).Update(); 
            }
            
            
            
            //Point mouseLocation = MouseInfo.getPointerInfo().getLocation();
            //for (Robot m : robots){
                //m.Arrive(new MVector((int)MovementPanel.mouseLocation.getX(), (int)MovementPanel.mouseLocation.getY()));
                //m.Wander();
                //System.out.print(String.format("(%d,%d)", (int)desiredVector.getX(), (int)desiredVector.getY()));
            //}
            
            
            repaint();
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAction;
    private javax.swing.JButton buttonPlayPause;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelHunter;
    // End of variables declaration//GEN-END:variables
}
