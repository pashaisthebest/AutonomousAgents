/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewController;

import Model.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.Timer;

/**
 * @author pashathebeast
 */

public class MovementPanel extends javax.swing.JPanel {
    private static final int RADIO_RADIUS = 200;
    
    public static final MVector NEST_LOCATION = new MVector(100, 100);
    public static final int WALL_THICKNESS = 30;
    
    Boolean toggleSensorsDrawing;
    
    ArrayList<Robot> robots;
    ArrayList<Obstacle> obstacles;
    Nest nest;
    Food food;
    
    Timer m_timer;
    Random r;

    // dragging business
    private Point initLocation;
    private Point initMouseLocationOnScreen;
    private Obstacle obstacleBeingDrawn;
    
    // properties
    public Boolean isSensorDrawingToggled() { return toggleSensorsDrawing; }
    public void setSensorDrawingToggled(Boolean isToggled) {this.toggleSensorsDrawing = isToggled; }
    
    /**
     * Creates new form MovementPanel
     */
    public MovementPanel() {
        initComponents();
        m_timer = new Timer(25, new TimerAction());
        r = new Random();
        robots = new ArrayList<>();
        nest = new Nest(NEST_LOCATION);
        obstacles = new ArrayList<>();
        toggleSensorsDrawing = true;
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);   
        
        Graphics2D g2D = (Graphics2D)g;
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // draw nest with red
        if (this.nest != null) {
            this.nest.paintSelf(g2D);
        }

        // draw nest with red
        if (this.food != null) {
            this.food.paintSelf(g2D);
        }
        
        if (obstacleBeingDrawn != null) {
            obstacleBeingDrawn.paintSelf(g2D);
        }
        
        // draw obstacles
        for (Obstacle obstacle : this.obstacles) {
            obstacle.paintSelf(g2D);
        }
        
        // draw robots
        for (Robot robot : robots){
            robot.paintSelf(g2D, this.toggleSensorsDrawing);
        }
    }
    
    public void clearObstacles() {
        this.obstacles.clear();
        this.AddWalls();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelAmount = new javax.swing.JLabel();
        labelHunter = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelAmount)
                    .add(layout.createSequentialGroup()
                        .add(211, 211, 211)
                        .add(labelHunter)))
                .addContainerGap(599, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(labelAmount)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 538, Short.MAX_VALUE)
                .add(labelHunter)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void performReset() {
        robots.clear();
        if (m_timer.isRunning()) {
            m_timer.stop();
        }
        repaint();
    }
    
    public void startAction() {
        // add robots
        
        Robot r1 = new Robot(new MVector(this.nest.getLocation().getX()+15, this.nest.getLocation().getY()), new MVector(1, 0));     
        robots.add(r1);
        Robot r2 = new Robot(new MVector(this.nest.getLocation().getX(), this.nest.getLocation().getY() - 15), new MVector(0, -1));     
        robots.add(r2);
        Robot r3 = new Robot(new MVector(this.nest.getLocation().getX()-15, this.nest.getLocation().getY()), new MVector(-1, 0));     
        robots.add(r3);
        Robot r4 = new Robot(new MVector(this.nest.getLocation().getX(), this.nest.getLocation().getY()+15), new MVector(0, 1));     
        robots.add(r4);
        repaint();
        
        labelAmount.setText("Population size: " + robots.size());
        m_timer.start();
    }
    
    public void playPause() {
        if (!m_timer.isRunning()) {
            m_timer.start();
        }
        else{
            m_timer.stop();
        }        
    }
    
    public void AddWalls() {
        GeneralPath leftWallPath = new GeneralPath();
        leftWallPath.moveTo(0, 0);
        leftWallPath.lineTo(WALL_THICKNESS, 0);
        leftWallPath.lineTo(WALL_THICKNESS, this.getHeight());
        leftWallPath.lineTo(0, this.getHeight());
        leftWallPath.closePath();
        
        GeneralPath rightWallPath = new GeneralPath();
        rightWallPath.moveTo(this.getWidth(), 0);
        rightWallPath.lineTo(this.getWidth(), this.getHeight());
        rightWallPath.lineTo(this.getWidth() - WALL_THICKNESS, this.getHeight());
        rightWallPath.lineTo(this.getWidth() - WALL_THICKNESS, 0);
        rightWallPath.closePath();
        
        GeneralPath topWallPath = new GeneralPath();
        topWallPath.moveTo(WALL_THICKNESS, 0);
        topWallPath.lineTo(this.getWidth() - WALL_THICKNESS, 0);
        topWallPath.lineTo(this.getWidth() - WALL_THICKNESS, WALL_THICKNESS);
        topWallPath.lineTo(WALL_THICKNESS, WALL_THICKNESS);
        topWallPath.closePath();
        
        GeneralPath bottomWallPath = new GeneralPath();
        bottomWallPath.moveTo(WALL_THICKNESS, this.getHeight());
        bottomWallPath.lineTo(this.getWidth() - WALL_THICKNESS, this.getHeight());
        bottomWallPath.lineTo(this.getWidth() - WALL_THICKNESS, this.getHeight() - WALL_THICKNESS);
        bottomWallPath.lineTo(WALL_THICKNESS, this.getHeight() - WALL_THICKNESS);
        bottomWallPath.closePath();
        
        Obstacle leftWall = new Obstacle(leftWallPath);
        Obstacle rightWall = new Obstacle(rightWallPath);
        Obstacle topWall = new Obstacle(topWallPath);
        Obstacle bottomWall = new Obstacle(bottomWallPath);
        
        
        obstacles.add(0, leftWall);
        obstacles.add(0, rightWall);
        obstacles.add(0, topWall);
        obstacles.add(0, bottomWall);
    }
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

        // remove walls before adding them again  
        if (!obstacles.isEmpty()) {
            for (int i=0; i<4; i++) {
                 this.obstacles.remove(0);
            }
        } 
        // add walls
        this.AddWalls();
        repaint();
    }//GEN-LAST:event_formComponentResized

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (evt.getButton() == MouseEvent.BUTTON3) {
            food = new Food(new MVector(evt.getX(), evt.getY()));
            this.repaint();
        } 
        else {
            if (this.robots.isEmpty()) {
                initLocation = this.getMousePosition();
                obstacleBeingDrawn = new Obstacle();        
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        Point currentMouseLocation = this.getMousePosition();
        if (initLocation != null && currentMouseLocation!= null) {
            // get current mouse location
            GeneralPath obstacleBeingDrawnPath = new GeneralPath();
            obstacleBeingDrawnPath.reset();
            obstacleBeingDrawnPath.moveTo(initLocation.x, initLocation.y);
            obstacleBeingDrawnPath.lineTo(currentMouseLocation.x, initLocation.y);
            obstacleBeingDrawnPath.lineTo(currentMouseLocation.x, currentMouseLocation.y);
            obstacleBeingDrawnPath.lineTo(initLocation.x, currentMouseLocation.y);
            obstacleBeingDrawnPath.closePath();         
            obstacleBeingDrawn.setShape(obstacleBeingDrawnPath);
            
            this.repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (obstacleBeingDrawn != null) {
            obstacles.add(new Obstacle(obstacleBeingDrawn.getShape()));
        }
        
        obstacleBeingDrawn = null;
        initLocation = null;
    }//GEN-LAST:event_formMouseReleased

        class TimerAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            
            for (Robot robot : robots) {
                //  look at the boundaries
                ArrayList<Robot> neighbours = new ArrayList<>();
                for (Robot neighbour : robots) {
                    //calculate distance between them 
                    
                    
                    GeneralPath pathBetweenRobots = new GeneralPath();
                    pathBetweenRobots.moveTo(robot.getLocation().getX(), robot.getLocation().getY());
                    pathBetweenRobots.lineTo(neighbour.getLocation().getX(), neighbour.getLocation().getY());
                    pathBetweenRobots.closePath();
                    
                    Boolean pathBetweenRobotsIntersectsObstacles = false;
                    for (Obstacle obstacle : obstacles) {
                        if (pathBetweenRobots.intersects(obstacle.getShape().getBounds())) {
                            pathBetweenRobotsIntersectsObstacles = true;
                        }
                    }
                    

                    
                    
                    if ((neighbour != robot) && (MVector.Distance(neighbour.getLocation(), robot.getLocation()) < RADIO_RADIUS) && !pathBetweenRobotsIntersectsObstacles) {
                        neighbours.add(neighbour);
                    }
                }
                robot.Update(neighbours, obstacles, nest, food);
            }
            
            //Point mouseLocation = MouseInfo.getPointerInfo().getLocation();
            //for (Robot m : robots){
                //m.Arrive(new MVector((int)MovementPanel.mouseLocation.getX(), (int)MovementPanel.mouseLocation.getY()));
                //m.Wander();
                //System.out.print(String.format("(%d,%d)", (int)desiredVector.getX(), (int)desiredVector.getY()));
            //}

            repaint();
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelHunter;
    // End of variables declaration//GEN-END:variables
}
